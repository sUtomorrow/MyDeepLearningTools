# -*- coding: utf-8 -*-
# @Time     : 9/17/19 6:20 PM
# @Author   : lty
# @File     : anchors

import numpy as np

def get_anchors(anchor_sizes, anchor_ratios):
    """
    get ori anchors by anchor sizes and anchor ratios

    :param anchor_sizes:  the base anchor sizes
    :param anchor_ratios: the ratios of w:h for each anchor size
    :return:              the anchors with different anchor size and anchor ratio, with length = len(anchor_sizes) * len(anchor_ratios)
    """

    anchor_sizes   = np.expand_dims(np.array(anchor_sizes), -1)
    anchor_ratios  = np.power(np.expand_dims(np.array(anchor_ratios), 0), 0.5)
    anchor_widths  = anchor_sizes * anchor_ratios
    anchor_heights = anchor_sizes / anchor_ratios
    anchors = np.stack([np.ravel(anchor_widths), np.ravel(anchor_heights)], axis=-1)
    return anchors

def anchor_shift(anchors, feature_size, stride):
    """
    assign anchors to each point in the feature map

    :param anchors:      the ori anchors generated by func:get_anchors
    :param feature_size: size of (h, w) for feature map
    :param stride:       the stride of feature map
    :return:             the anchor coordinate with shape (h, w, 4) and order [x1, y1, x2, y2]
    """
    height, width = feature_size
    anchors = np.tile(np.reshape(anchors, (1, 1, len(anchors), 2)), (height, width, 1, 1))
    x = (np.arange(0, width) + 0.5) * stride
    y = (np.arange(0, height) + 0.5) * stride
    xs, ys = np.meshgrid(x, y)
    grid = np.expand_dims(np.stack([xs, ys], axis=-1), axis=2)
    tl_coordinate = grid - anchors / 2
    br_coordinate = tl_coordinate + anchors
    return np.concatenate([tl_coordinate, br_coordinate], axis=-1)

if __name__ == '__main__':
    """test anchor generate"""

    anchors = get_anchors([4, 8], anchor_ratios=[0.5, 2.0])
    print(anchors)
    # [[ 2.82842712  5.65685425]
    #  [ 5.65685425  2.82842712]
    #  [ 5.65685425 11.3137085 ]
    #  [11.3137085   5.65685425]]

    anchors = anchor_shift(anchors, (2, 2), 8)
    print(anchors)
    # [[[[ 2.58578644  1.17157288  5.41421356  6.82842712]
    #    [ 1.17157288  2.58578644  6.82842712  5.41421356]
    #    [ 1.17157288 -1.65685425  6.82842712  9.65685425]
    #    [-1.65685425  1.17157288  9.65685425  6.82842712]]
    #
    #   [[10.58578644  1.17157288 13.41421356  6.82842712]
    #    [ 9.17157288  2.58578644 14.82842712  5.41421356]
    #    [ 9.17157288 -1.65685425 14.82842712  9.65685425]
    #    [ 6.34314575  1.17157288 17.65685425  6.82842712]]]
    #
    #
    #  [[[ 2.58578644  9.17157288  5.41421356 14.82842712]
    #    [ 1.17157288 10.58578644  6.82842712 13.41421356]
    #    [ 1.17157288  6.34314575  6.82842712 17.65685425]
    #    [-1.65685425  9.17157288  9.65685425 14.82842712]]
    #
    #   [[10.58578644  9.17157288 13.41421356 14.82842712]
    #    [ 9.17157288 10.58578644 14.82842712 13.41421356]
    #    [ 9.17157288  6.34314575 14.82842712 17.65685425]
    #    [ 6.34314575  9.17157288 17.65685425 14.82842712]]]]